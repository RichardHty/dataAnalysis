}
}
}
traindata1<-traindata1[-1]
traindata1<-traindata[1:45000, ]
testdata1<-traindata[45001:59381, ]
traindata2<-sample_n(traindata,45000)
m=traindata2$Response
param1 <- list("objective" = "binary:logistic",
booster = "gbtree",
"eval_metric" = "auc",
#lambda=2,
alpha=1,
colsample_bytree = 0.85,
subsample = 0.80)
traindata2$Response=NULL
m<-m/8
pre_model<-xgboost(data=as.matrix(traindata2),label = m, params=param1,nround = 20,max.depth = 10,eta = 0.01, maximize = T)
history<-xgb.cv(data=as.matrix(traindata2),label=m,nfold=10,nround=3,max.depth=2,eta=1,objective="binary:logistic")
history<-xgb.cv(data=as.matrix(traindata2),label=m,nfold=10,nround=30,max.depth=2,eta=1,objective="binary:logistic")
pre_model<-xgboost(data=as.matrix(traindata2),label = m, params=param1,nround = 100,max.depth = 10,eta = 0.01, maximize = T)
goal<-predict(pre_model,as.matrix(testdata))
goal<-goal*8
View(testdata)
View(testdata)
testdata<-testdata[-1]
goal<-predict(pre_model,as.matrix(testdata))
goal<-goal*8
write.csv(cbind(testid,Response=round(goal,7)),"submission.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal,6)),"submission.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal,5)),"submission.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal,5)),"submission1.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal,0)),"submission.csv",row.names=FALSE)
goal<-predict(pre_model,as.matrix(testdata))
goal[goal>0.6]=0.88
goal[goal<0]=0
goal[goal<0.2 & goal>0.1]=0.1
goal[goal<0.3 & goal>0.2]=0.2
goal<-goal*8
write.csv(cbind(testid,Response=round(goal,0)),"submission.csv",row.names=FALSE)
goal[goal<0.45 & goal>0.4]=0.4
write.csv(cbind(testid,Response=round(goal,0)),"submission.csv",row.names=FALSE)
library(xgboost)
library(dplyr)
traindata<-read.csv("/Users/richard/Documents/learn_from_insurance/train.csv")
testdata<-read.csv("/Users/richard/Documents/learn_from_insurance/test.csv")
traindata<-traindata[-1]
traindata<-traindata[-1]
testid<-testdata[1]
testdata<-testdata[-1]
testdata<-testdata[-1]
traindata[is.na(traindata)]=0
testdata[is.na(testdata)]=0
train_names <- names(traindata)
for (i in train_names)
{
if (class(traindata[[i]]) == "integer")
{
u <- unique(traindata[[i]])
if (length(u) == 1)
{
traindata[[i]] <- NULL
testdata[[i]]<-NULL
}
}
}
traindata1<-traindata1[-1]
traindata1<-traindata[1:45000, ]
testdata1<-traindata[45001:59381, ]
traindata2<-sample_n(traindata,45000)
m1=traindata1$Response
m2=traindata2$Response
m=traindata$Response
param1 <- list("objective" = "binary:logistic",
booster = "gbtree",
"eval_metric" = "auc",
#lambda=2,
alpha=1,
colsample_bytree = 0.85,
subsample = 0.80)
traindata2$Response=NULL
#traindata$Response=NULL
traindata1$Response=NULL
m<-m/8
m1<-m1/8
m2<-m2/8
history1<-xgb.cv(data=as.matrix(traindata1),label=m1,nfold=10,nround=100,max.depth=10,eta=0.01,objective="binary:logistic")
history1<-xgb.cv(data=as.matrix(traindata1),label=m1,nfold=10,nround=2,max.depth=2,eta=0.01,objective="binary:logistic")
history2<-xgb.cv(data=as.matrix(traindata2),label=m2,nfold=10,nround=2,max.depth=2,eta=0.01,objective="binary:logistic")
print(history1)
print(history2)
history1<-xgb.cv(data=as.matrix(traindata1),label=m1,nfold=10,nround=2,max.depth=2,eta=0.05,objective="binary:logistic")
history2<-xgb.cv(data=as.matrix(traindata2),label=m2,nfold=10,nround=2,max.depth=2,eta=0.05,objective="binary:logistic")
history1<-xgb.cv(data=as.matrix(traindata1),label=m1,nfold=10,nround=2,max.depth=2,eta=0.5,objective="binary:logistic")
history2<-xgb.cv(data=as.matrix(traindata2),label=m2,nfold=10,nround=2,max.depth=2,eta=0.5,objective="binary:logistic")
pre_model1<-xgboost(data=as.matrix(traindata1),label = m1, params=param1,nround = 100,max.depth = 10,eta = 0.01, maximize = T)
history1<-xgb.cv(data=as.matrix(traindata1),label=m1,nfold=10,nround=2,max.depth=2,eta=1,objective="binary:logistic")
history2<-xgb.cv(data=as.matrix(traindata2),label=m2,nfold=10,nround=2,max.depth=2,eta=1,objective="binary:logistic")
goal1<-predict(pre_model1,as.matrix(testdata))
goal2<-predict(pre_model2,as.matrix(testdata))
write.csv(cbind(testid,Response=round(goal1,0)),"submission1.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal2,0)),"submission2.csv",row.names=FALSE)
pre_model1<-xgboost(data=as.matrix(traindata1),label = m1, params=param1,nround = 100,max.depth = 10,eta = 0.5, maximize = T)
pre_model2<-xgboost(data=as.matrix(traindata2),label = m2, params=param1,nround = 100,max.depth = 10,eta =0.5, maximize = T)
goal1<-predict(pre_model1,as.matrix(testdata))
goal2<-predict(pre_model2,as.matrix(testdata))
write.csv(cbind(testid,Response=round(goal1,0)),"submission1.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal2,0)),"submission2.csv",row.names=FALSE)
testdata<-testdata[-1]
goal1<-predict(pre_model1,as.matrix(testdata))
goal2<-predict(pre_model2,as.matrix(testdata))
write.csv(cbind(testid,Response=round(goal1,0)),"submission1.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal2,0)),"submission2.csv",row.names=FALSE)
goal1[goal1<0.125]=0.125
write.csv(cbind(testid,Response=round(goal1,0)),"submission1.csv",row.names=FALSE)
goal1<-predict(pre_model1,as.matrix(testdata))
goal2<-predict(pre_model2,as.matrix(testdata))
goal1<-goal1*8
goal2<-goal2*8
write.csv(cbind(testid,Response=round(goal1,0)),"submission1.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal2,0)),"submission2.csv",row.names=FALSE)
goal1[goal1<1]=1
write.csv(cbind(testid,Response=round(goal1,0)),"submission1.csv",row.names=FALSE)
goal2[goal2<1]=1
write.csv(cbind(testid,Response=round(goal2,0)),"submission2.csv",row.names=FALSE)
View(testdata)
library(xgboost)
library(dplyr)
traindata<-read.csv("/Users/richard/Documents/learn_from_insurance/train.csv")
testdata<-read.csv("/Users/richard/Documents/learn_from_insurance/test.csv")
traindata<-traindata[-1]
traindata<-traindata[-1]
testid<-testdata[1]
testdata<-testdata[-1]
testdata<-testdata[-1]
traindata[is.na(traindata)]=0
testdata[is.na(testdata)]=0
train_names <- names(traindata)
for (i in train_names)
{
if (class(traindata[[i]]) == "integer")
{
u <- unique(traindata[[i]])
if (length(u) == 1)
{
traindata[[i]] <- NULL
testdata[[i]]<-NULL
}
}
}
#traindata1<-traindata1[-1]
traindata1<-traindata[1:45000, ]
testdata1<-traindata[45001:59381, ]
traindata2<-sample_n(traindata,45000)
m1=traindata1$Response
m2=traindata2$Response
m=traindata$Response
param1 <- list("objective" = "binary:logistic",
booster = "gbtree",
"eval_metric" = "auc",
#lambda=2,
alpha=1,
colsample_bytree = 0.85,
subsample = 0.80)
traindata2$Response=NULL
#traindata$Response=NULL
traindata1$Response=NULL
m<-m/8
m1<-m1/8
m2<-m2/8
history1<-xgb.cv(data=as.matrix(traindata1),label=m1,nfold=10,nround=2,max.depth=2,eta=1,objective="binary:logistic")
history2<-xgb.cv(data=as.matrix(traindata2),label=m2,nfold=10,nround=2,max.depth=2,eta=1,objective="binary:logistic")
print(history1)
print(history2)
pre_model1<-xgboost(data=as.matrix(traindata1),label = m1, params=param1,nround = 100,max.depth = 10,eta = 0.5, maximize = T)
pre_model2<-xgboost(data=as.matrix(traindata2),label = m2, params=param1,nround = 100,max.depth = 10,eta =0.5, maximize = T)
goal1<-predict(pre_model1,as.matrix(testdata))
goal2<-predict(pre_model2,as.matrix(testdata))
goal1<-goal1*8
goal2<-goal2*8
write.csv(cbind(testid,Response=round(goal1,0)),"submission1.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal2,0)),"submission2.csv",row.names=FALSE)
goal[goal>0.7]=0.85
goal1[goal1<0.125]=0.125
goal[goal<0.55 & goal>0.48]=0.65
goal[goal<0.45 & goal>0.4]=0.4
goal[goal<0.2 & goal>0.1]=0.1
goal[goal<0.3 & goal>0.2]=0.2
goal<-goal*8
history<-xgb.cv(data=as.matrix(traindata2),label=m,nfold=10,nround=30,max.depth=2,eta=1,objective="binary:logistic")
write.csv(cbind(testid,Response=round(goal,0)),"submission.csv",row.names=FALSE)
require(caret)
fitControl = trainControl(
method = "cv",
number = 5,
repeats = 5,
returnResamp = "all")
x = goal
y = testdata1$Response
glmFit = train(y, x,
method = "glm",
trControl = fitControl)
print(glmFit)
View(testdata1)
View(testdata1)
library(xgboost)
library(dplyr)
#数据预处理
traindata<-read.csv("/Users/richard/Documents/learn_from_insurance/train.csv")
testdata<-read.csv("/Users/richard/Documents/learn_from_insurance/test.csv")
traindata<-traindata[-1]
traindata<-traindata[-1]
testid<-testdata[1]
testdata<-testdata[-1]
testdata<-testdata[-1]
traindata[is.na(traindata)]=0
testdata[is.na(testdata)]=0
train_names <- names(traindata)
for (i in train_names)
{
if (class(traindata[[i]]) == "integer")
{
u <- unique(traindata[[i]])
if (length(u) == 1)
{
traindata[[i]] <- NULL
testdata[[i]]<-NULL
}
}
}
traindata1<-traindata[1:55000, ]
testdata1<-traindata[55001:59381, ]
traindata2<-sample_n(traindata,55000)
m1=traindata1$Response
m2=traindata2$Response
m=traindata$Response
m<-m/8
m1<-m1/8
m2<-m2/8
param1 <- list("objective" = "binary:logistic",
booster = "gbtree",
"eval_metric" = "auc",
#lambda=2,
alpha=1,
colsample_bytree = 0.85,
subsample = 0.80)
traindata2$Response=NULL
traindata1$Response=NULL
#十折交叉验证确定迭代步长
history1<-xgb.cv(data=as.matrix(traindata1),label=m1,nfold=10,nround=5,max.depth=2,eta=0.6,objective="binary:logistic")
history2<-xgb.cv(data=as.matrix(traindata2),label=m2,nfold=10,nround=5,max.depth=2,eta=0.6,objective="binary:logistic")
print(history1)
print(history2)
history2<-xgb.cv(data=as.matrix(traindata2),label=m2,nfold=10,nround=5,max.depth=2,eta=0.5,objective="binary:logistic")
print(history2)
history2<-xgb.cv(data=as.matrix(traindata2),label=m2,nfold=10,nround=5,max.depth=2,eta=0.4,objective="binary:logistic")
print(history2)
history2<-xgb.cv(data=as.matrix(traindata2),label=m2,nfold=10,nround=5,max.depth=2,eta=0.7,objective="binary:logistic")
history2<-xgb.cv(data=as.matrix(traindata2),label=m2,nfold=10,nround=5,max.depth=10,eta=0.7,objective="binary:logistic")
history2<-xgb.cv(data=as.matrix(traindata2),label=m2,nfold=10,nround=5,max.depth=8,eta=0.7,objective="binary:logistic")
print(history2)
history2<-xgb.cv(data=as.matrix(traindata2),label=m2,nfold=10,nround=5,max.depth=11,eta=0.7,objective="binary:logistic")
history1<-xgb.cv(data=as.matrix(traindata1),label=m1,nfold=10,nround=5,max.depth=10,eta=0.6,objective="binary:logistic")
history1<-xgb.cv(data=as.matrix(traindata1),label=m1,nfold=10,nround=5,max.depth=11,eta=0.6,objective="binary:logistic")
history1<-xgb.cv(data=as.matrix(traindata1),label=m1,nfold=10,nround=5,max.depth=9,eta=0.6,objective="binary:logistic")
library(xgboost)
library(dplyr)
#数据预处理
traindata<-read.csv("/Users/richard/Documents/learn_from_insurance/train.csv")
testdata<-read.csv("/Users/richard/Documents/learn_from_insurance/test.csv")
traindata<-traindata[-1]
traindata<-traindata[-1]
testid<-testdata[1]
testdata<-testdata[-1]
testdata<-testdata[-1]
traindata[is.na(traindata)]=0
testdata[is.na(testdata)]=0
train_names <- names(traindata)
for (i in train_names)
{
if (class(traindata[[i]]) == "integer")
{
u <- unique(traindata[[i]])
if (length(u) == 1)
{
traindata[[i]] <- NULL
testdata[[i]]<-NULL
}
}
}
traindata1<-traindata[1:55000, ]
testdata1<-traindata[55001:59381, ]
traindata2<-sample_n(traindata,55000)
m1=traindata1$Response
m2=traindata2$Response
m=traindata$Response
m<-m/8
m1<-m1/8
m2<-m2/8
param1 <- list("objective" = "binary:logistic",
booster = "gbtree",
"eval_metric" = "auc",
#lambda=2,
alpha=1,
colsample_bytree = 0.85,
subsample = 0.80)
traindata2$Response=NULL
traindata1$Response=NULL
#十折交叉验证确定迭代步长
history1<-xgb.cv(data=as.matrix(traindata1),label=m1,nfold=10,nround=5,max.depth=9,eta=0.6,objective="binary:logistic")
history2<-xgb.cv(data=as.matrix(traindata2),label=m2,nfold=10,nround=5,max.depth=11,eta=0.7,objective="binary:logistic")
pre_model1<-xgboost(data=as.matrix(traindata1),label = m1, params=param1,nround = 100,max.depth = 9,eta = 0.6, maximize = T)
pre_model2<-xgboost(data=as.matrix(traindata2),label = m2, params=param1,nround = 100,max.depth = 11,eta =0.7, maximize = T)
goal1<-predict(pre_model1,as.matrix(testdata))
goal2<-predict(pre_model2,as.matrix(testdata))
#
goal1[goal1>0.7]=0.8
goal1[goal1<0.125]=0.125
goal1[goal1<0.55 & goal1>0.48]=0.65
goal1[goal1<0.45 & goal1>0.4]=0.4
goal1[goal1<0.2 & goal1>0.1]=0.1
goal1[goal1<0.3 & goal1>0.2]=0.2
#
#
goal2[goal2>0.7]=0.8
goal2[goal2<0.125]=0.125
goal2[goal2<0.55 & goal2>0.48]=0.65
goal2[goal2<0.45 & goal2>0.4]=0.4
goal2[goal2<0.2 & goal2>0.1]=0.1
goal2[goal2<0.3 & goal2>0.2]=0.2
goal1<-goal1*8
goal2<-goal2*8
write.csv(cbind(testid,Response=round(goal1,0)),"submission1.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal2,0)),"submission2.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal1,0)),"submission3.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal2,0)),"submission4.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal1,0)),"submission1.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal2,0)),"submission2.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal1,0)),"submission3.csv",row.names=FALSE)
write.csv(cbind(testid,Response=round(goal2,0)),"submission4.csv",row.names=FALSE)
x<-(1,2,2,3,4)
x<-c(1,2,2,3,4)
y<-c(1,2,3,2,4)
r<-cor(x,y)
pt<-(1.5,20)
pt(1.5,20)
pt(1.5,5)
pt(1.5,100)
pt(1.5,2)
qt(0.1441,2)
qt(0.1441,5)
qt(0.1441,100)
qt(0.1441,1000)
qt(0.1441,10000)
qt(0.1441,5)
qt(0.95,1,12)
#question 2 p-value
pt(0.302721,24)
pnorm(130,104,12.6)
1-pnorm(130,104,12.6)
1-pnorm(130,130,15)
pt(1.7,20)
#question 4 p-value
pt(2.8248,21)
#question 2 p-value
pt(0.302721,24)
qt(1.7,20)
2*(1-pt(1.7,20))
mmass<-c(35.2,54.6,48.5,42.0,50.6,42.0,40.3,33.1,42.4,34.5)
mRate<-c(991,1455,1395,1418,1502,1246,1189,913,1124,1052)
r<-cor(mmass,mRate)
sd_x<-sd(mmass)
sd_y<-sd(mRate)
xBar<-mean(mmass)
yBar<-mean(mRate)
beta1<-r*(sd_y/sd_x)
beta0<-yBar-beta1*xBar
m<-lm(mmass~mRate)
View(m)
summary(m)
anova(m)
m<-lm(mRate~mmass)
summary(m)
beta1*48+beta1
b<-c(71,69,66,67,70,71,70,73,72,65,66)
s<-c(69,63,65,63,65,62,65,64,66,59,62)
r2<-cor(b,s)
r2<-cor(s,b)
r2<-cor(b,s)
m2<-lm(s~b)
summary(m2)
summary(m)
0.5362*72+26.8653
plot(b, s,
main="Number Of Meals Containing Fish vs. Mercury Level In Hair",
xlab="Number of meals containing fish", ylab="Mercury level in hair",
pch=18, col="red", cex.lab=1.3)
plot(b, s,main="Number Of Meals Containing Fish vs. Mercury Level In Hair",
xlab="Number of meals containing fish", ylab="Mercury level in hair",
col="red", cex.lab=1.3)
plot(b, s,main="Number Of Meals Containing Fish vs. Mercury Level In Hair",
xlab="Number of meals containing fish", ylab="Mercury level in hair",
col="red")
plot(b/10, s/10,main="Number Of Meals Containing Fish vs. Mercury Level In Hair",
xlab="Number of meals containing fish", ylab="Mercury level in hair",
col="red")
anova(m2)
qf(0.95,df1=1,df2=9)
pf(20.76,df1=2,df2=17)
install.packages('car')
setwd("~/Desktop/cs_spring18/cs555/R_wd")
raw_data<-read.csv("datasets/cs555_a5.csv", header = TRUE)
View(raw_data)
#get corresponding data, get rid of NA value
countTable<-table(raw_data[[1]])
factor(raw_data[[1]])
iq<-raw_data[[2]]
age<-raw_data[[3]]
m_iq<-aov(iq~groupFactor,data=raw_data)
groupFactor<-factor(raw_data[[1]])
m_iq<-aov(iq~groupFactor,data=raw_data)
View(m_iq)
View(m_iq)
summary(m_iq)
m_age<-aov(age~groupFactor,data=raw_data)
summary(m_age)
plot(groupFactor, iq,
main="Different Group vs Test Score",
xlab="group", ylab="Test Score",
pch=18, col="red", cex.lab=1.3)
plot(groupFactor, age,
main="Different Group vs Age",
xlab="group", ylab="Age",
pch=18, col="red", cex.lab=1.3)
qf(0.95,df1 = 2,df2 = 42)
TukeyHSD(m_iq)
dummy_g1 <- ifelse(groupFactor=='Math student', 1, 0)
dummy_g2 <- ifelse(groupFactor=='Physics student', 1, 0)
m2 <- lm(iq~dummy_g1+dummy_g2, data=raw_data)
summary(m2)
anova(m2)
summary(m_age)
m_age<-aov(age~groupFactor,data=raw_data)
summary(m_age)
TukeyHSD(m_age)
TukeyHSD(m_age)
TukeyHSD(m_iq)
library(lsmeans)
install.packages('lsmeans')
library(lsmeans)
lsmeans(lm(age~groupFactor), pairwise~groupFactor, adjust="tukey")
Anova(lm(iq~groupFactor+age), type=3)
install.packages('car')
library(car)
Anova(lm(iq~groupFactor+age), type=3)
options(contrasts=c("contr.treatment", "contr.poly"))
lsmeans(lm(age~groupFactor), pairwise~groupFactor, adjust="tukey")
#get corresponding data, get rid of NA value
groupFactor<-factor(raw_data[[1]])
groupFactor
#get corresponding data, get rid of NA value
table(raw_data[[1]])
summary(groupFactor)
#get corresponding data, get rid of NA value
groupFactor<-factor(raw_data[[1]])
summary(groupFactor)
summary(iq~groupFactor)
summary(iq,groupFactor)
summary(iq)
summary(iq+groupFactor)
summary(groupFactor,iq)
pairwise.t.test(iq, groupFactor, p.adj='bonferroni')
dummy_g1 <- ifelse(groupFactor=='Math student', 1, 0)
dummy_g2 <- ifelse(groupFactor=='Physics student', 1, 0)
m2 <- lm(iq~dummy_g1+dummy_g2, data=raw_data)
summary(m2)
library(car)
Anova(lm(iq~groupFactor+age), type=3)
library(lsmeans)
options(contrasts=c("contr.treatment", "contr.poly"))
lsmeans(lm(iq~groupFactor+age), pairwise~groupFactor, adjust="tukey")
physics<-raw_data['Physics student']
physics<-raw_data[raw_data$group == 'Physics student']
physics<-raw_data[raw_data$group == 'Physics student',]
View(physics)
View(physics)
physics<-raw_data[raw_data$group == 'Physics student',]
mathStudent<-raw_data[raw_data$group == 'Math student',]
chemistry<-raw_data[raw_data$group == 'Chemistry student',]
plot(physics$iq, physics$age,
main="physcis student iq vs age",
xlab="iq", ylab="age",
pch=18, col="red", cex.lab=1.3)
summary(physics)
plot(mathStudent$iq, mathStudent$age,
main="math student iq vs age",
xlab="iq", ylab="age",
pch=18, col="red", cex.lab=1.3)
summary(mathStudent)
plot(chemistry$iq,chemistry$age,
main="chemistry student iq vs age",
xlab="iq", ylab="age",
pch=18, col="red", cex.lab=1.3)
summary(chemistry)
boxplot(physics)
boxplot(physics$iq,physics$age)
boxplot(physics$iq,physics$age,xlab="category", ylab="value")
par(mfrow=c(1,3))
boxplot(physics$iq,physics$age,xlab="category", ylab="value",main="physics student")
boxplot(mathStudent$iq,mathStudent$age,xlab="category", ylab="value",main="math student")
boxplot(chemistry$iq,chemistry$age,xlab="category", ylab="value",main="chemistry student")
qf(0.95,df1 = 2,df2 = 41)
